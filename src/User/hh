/*
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'mock_data.dart';

class AddFicheScreen extends StatefulWidget {
  const AddFicheScreen({Key? key}) : super(key: key);

  @override
  State<AddFicheScreen> createState() => _AddFicheScreenPageState();
}

class _AddFicheScreenPageState extends State<AddFicheScreen> {
  List<Map<String, dynamic>> planifications = [];
  bool isLoading = true;
  LatLng? currentPosition;

  @override
  void initState() {
    super.initState();
    print("Initializing position and planifications...");
    _determinePosition();
    _loadPlanifications();
  }
  




  void _showCustomDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          child: Container(
            // Set fixed height and responsive width
            height: 500, // Fixed height of the dialog
            width: MediaQuery.of(context).size.width * 0.8, // 80% of screen width
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Text(
                      "Visite Form",
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 20),
                    // Type Point de Vente
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Text on top
                        const Text(
                          "Point de Vente:",
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ),
                        const SizedBox(height: 8), // Spacing between text and table
                        // Table for labels and checkboxes
                        Table(
                          columnWidths: const {
                            0: FlexColumnWidth(1),
                            1: FlexColumnWidth(1),
                            2: FlexColumnWidth(1),
                            3: FlexColumnWidth(1),
                          },
                          children: [
                            TableRow(
                              children: [
                                // Checkbox and label for "G"
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Checkbox(
                                      value: false,
                                      onChanged: (value) {
                                        // Add logic here
                                      },
                                    ),
                                    const Text("G"),
                                  ],
                                ),
                                // Checkbox and label for "D"
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Checkbox(
                                      value: false,
                                      onChanged: (value) {
                                        // Add logic here
                                      },
                                    ),
                                    const Text("D"),
                                  ],
                                ),
                                // Checkbox and label for "ID"
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Checkbox(
                                      value: false,
                                      onChanged: (value) {
                                        // Add logic here
                                      },
                                    ),
                                    const Text("ID"),
                                  ],
                                ),
                                // Checkbox and label for "NC"
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Checkbox(
                                      value: false,
                                      onChanged: (value) {
                                        // Add logic here
                                      },
                                    ),
                                    const Text("NC"),
                                  ],
                                ),
                              ],
                            ),
                          ],
                        ),
                      ],
                    ),
                    const SizedBox(height: 20),
                    // Disponibilité
                    Row(
                      children: [
                        const Text("Disponibilité"),
                        const SizedBox(width: 15),
                        ElevatedButton(
                          onPressed: () {
                            _showChooseCimenterieDialog(context);
                          },
                          child: const Text("Ajouter Produit"),
                        ),
                      ],
                    ),
                    const SizedBox(height: 20),
                    // Observation TextField
                    const Text(
                      "Observation:",
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    const TextField(
                      decoration: InputDecoration(
                        hintText: "Enter your observation",
                        border: OutlineInputBorder(),
                        suffixIcon: Icon(Icons.mic),
                      ),
                    ),
                    const SizedBox(height: 20),
                    // Réclamation TextField
                    const Text(
                      "Réclamation:",
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    const TextField(
                      decoration: InputDecoration(
                        hintText: "Enter your réclamation",
                        border: OutlineInputBorder(),
                        suffixIcon: Icon(Icons.mic),
                      ),
                    ),
                    const SizedBox(height: 20),
                    // Button Ajouter Pièce Jointe
                    ElevatedButton(
                      onPressed: () {
                        // Add logic to attach a file
                      },
                      child: const Text("Ajouter Pièce Jointe"),
                    ),
                    const SizedBox(height: 20),
                    // Button Ajouter Visite
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        ElevatedButton(
                          onPressed: () {
                            // Add logic to submit the form
                          },
                          child: const Text("Ajouter Visite"),
                        ),
                        ElevatedButton(
                          onPressed: () {
                            // Add logic to cancel the form
                          },
                          child: const Text("Annuler"),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }
  void _showChooseCimenterieDialog(BuildContext context) {
    const int itemCount = 8; // Total number of items to display
    showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          child: Container(
            // Control the height and width of the dialog
            height: 500, // Set your desired height here
            width: MediaQuery.of(context).size.width * 0.8, // Responsive width
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text(
                    "Choisir la cimenterie",
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 20),
                  Expanded(
                    child: ListView(
                      shrinkWrap: true,
                      children: _buildRows(context, itemCount),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  /// Builds rows dynamically based on itemCount and the alternating pattern.
  List<Widget> _buildRows(BuildContext context, int itemCount) {
    List<Widget> rows = [];
    bool isTwoItemRow = true; // Start with two items in the first row

    for (int i = 0; i < itemCount;) {
      int itemsInRow = isTwoItemRow ? 2 : 1; // Alternate between two and one item
      List<Widget> rowItems = [];

      // Add items to the current row
      for (int j = 0; j < itemsInRow && i < itemCount; j++, i++) {
        rowItems.add(_buildCircularCard(context, i));
      }

      // Add the current row to the list
      rows.add(
        Row(
          mainAxisAlignment: rowItems.length == 1
              ? MainAxisAlignment.center
              : MainAxisAlignment.spaceEvenly,
          children: rowItems,
        ),
      );

      // Add spacing between rows
      rows.add(const SizedBox(height: 20));

      // Alternate the row pattern
      isTwoItemRow = !isTwoItemRow;
    }

    return rows;
  }

  /// Builds a single circular card.
  Widget _buildCircularCard(BuildContext context, int index) {
    return GestureDetector(
      onTap: () {
        Navigator.pop(context); // Close the current dialog
        _showProductDialog(context, index); // Open the next dialog
      },
      child: Column(
        children: [
          // Circular card with elevation
          Material(
            shape: const CircleBorder(),
            elevation: 4,
            child: ClipOval(
              child: Image.asset(
                "assets/logo.png",
                height: 100,
                width: 100,
                fit: BoxFit.cover,
              ),
            ),
          ),
          const SizedBox(height: 10),
          // Text details
          Text(
            "Cimenterie ${index + 1}",
            style: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  void _showProductDialog(BuildContext context, int index) {
    showDialog(
      context: context,
      builder: (context) {
        return ProductDialog(index: index); // Pass the index to ProductDialog
      },
    );
  }


Future<void> _determinePosition() async {
    print("Determining position...");
    // Simulate current position
    await Future.delayed(const Duration(seconds: 1));
    setState(() {
      currentPosition = LatLng(33.8869, 9.5375); // Example position
      print("Current position set: $currentPosition");
    });
  }


void _handleCurrentPositionTap() {
  if (currentPosition == null) return;

  final nearbyPlans = planifications.where((plan) {
    LatLng planPosition = LatLng(plan['localisation']['latitude'], plan['localisation']['longitude']);
    return isWithinProximity(currentPosition!, planPosition, 500); // Increased distance to 500 meters for testing
  }).toList();

  if (nearbyPlans.isNotEmpty) {
    _showPlanificationOptions(nearbyPlans.first); // Show modify options for the first nearby plan
  } else {
    _showAddPointOfSalePopup(); // Show "Add Point of Sale" when no nearby point is found
  }
}

  void _showPlanificationOptions(Map<String, dynamic> plan) {
    print("Showing planification options for: ${plan['name'] ?? 'Unknown'}");
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Options disponibles'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Point de vente trouvé: ${plan['name'] ?? "Non spécifié"}',
                style: const TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _modifyPointOfSalePopup(plan);
                },
                child: const Text('Modifier Point de Vente'),
              ),
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _showCustomDialog(context);
                },
                child: const Text('Ajouter Fiche Visite'),
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    print("Building screen...");
    return SafeArea(
      child: Scaffold(
        body: isLoading
            ? const Center(child: CircularProgressIndicator())
            : content(),
      ),
    );
  }
}

class ProductDialog extends StatefulWidget {
  final int index;

  const ProductDialog({required this.index});

  @override
  _ProductDialogState createState() => _ProductDialogState();
}

class _ProductDialogState extends State<ProductDialog> {
  // Track the tapped card's index
  int? tappedCardIndex;

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      child: Container(
        height: 500, // Set your desired height here
        width: MediaQuery.of(context).size.width * 0.8, // Responsive width
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text(
                "Choisir le produit",
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              Expanded(
                child: ListView.builder(
                  itemCount: 4, // Number of cards to display
                  itemBuilder: (context, index) {
                    return GestureDetector(
                      onTap: () {
                        setState(() {
                          tappedCardIndex = index; // Set the tapped card index
                        });
                      },
                      child: Column(
                        children: [
                          Container(
                            width: MediaQuery.of(context).size.width * 0.3, // Set the card width
                            height: 100, // Set the card height
                            child: Card(
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                              elevation: 4,
                              child: Column(
                                children: [
                                  ClipRRect(
                                    borderRadius: const BorderRadius.only(
                                      topLeft: Radius.circular(10),
                                      topRight: Radius.circular(10),
                                    ),
                                    child: Image.asset(
                                      "assets/cimentP.jpg", // Replace with your image path
                                      height: 60, // Adjust as needed
                                      width: double.infinity,
                                      fit: BoxFit.cover,
                                    ),
                                  ),
                                  const SizedBox(height: 10),
                                  Text(
                                    "Produit ${index + 1}",
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          // Show the TextField below the card if it's tapped
                          if (tappedCardIndex == index)
                            Padding(
                              padding: const EdgeInsets.only(top: 10.0),
                              child: SizedBox(
                                width: MediaQuery.of(context).size.width * 0.3, // Set the width
                                height: 50, // Set the height
                                child: const TextField(
                                  decoration: InputDecoration(
                                    labelText: 'Price',
                                    border: OutlineInputBorder(),
                                    suffixIcon: Icon(Icons.attach_money),
                                  ),
                                ),
                              ),
                            ),

                          const SizedBox(height: 10), // Add space between cards
                        ],
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}




when clicking on a cimenterie card the dialog of the chooseCimenterie and the all screen is bolcked 